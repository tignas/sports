<!DOCTYPE html>
<html>
<head>
<title>Auction Cheat sheet</title>
<link rel="stylesheet" href="/static/css/reset.css"/>
<link rel="stylesheet" href="/static/css/auction.css"/>
<script type="text/javascript" src="/static/vendor/jquery.min.js"></script>
<script type="text/javascript" src="/static/vendor/underscore/underscore-min.js"></script>
<script type="text/javascript" src="/static/vendor/backbone/backbone-min.js"></script>
<script type="text/javascript" src="/static/vendor/datatables/dataTables.js"></script>
<script type="text/javascript" src="/static/league_info.js"></script>
<script type="text/javascript" src="/static/projections.js"></script>
<script type="text/template" id="player-row">
<% _.each(collection, function(i) { %>
  <tr>
    <td></td>
    <td><%= i.name %></td>
    <td><%= i.pos %></td>
    <td><%= i.team %></td>
    <td><%= i.pts %></td>
    <td><%= i.val %></td>
    <td class="keeper"><input id='<%= i.name %>' type='number' data-player-name='<%= i.name %>' step='any'
    <% if (i.keeper) { %>
    value='<%= i.keeper %>'
    name='<%= i.name %>'
    <% } %>
    />
    </td>
  </tr>
<% }); %>
</script>

<script type="text/template" id="scoring-template">
<% _.each(collection, function(vals, cat) { %>
<fieldset class="scoring_cat">
<legend ><%= cat %> </legend>
<ul>
    <% _.each(vals, function(i) { var i = i.toJSON(); %>
    <li>
    <label for='<%= i.cat %>'><%= i.cat.split('_').slice(-1)[0] %> : </label>
    <input id='<%= i.cat %>' name='<%= i.cat %>' value='<%= i.val %>' type='number' step='any'/>
    </li>
    <% }); %>
</ul>
</fieldset>
<% }); %>
</script>

<script type="text/template" id="league-template">
<ul>
<% _.each(collection, function(i) { %>
    <li>
    <label for='<%= i.cat %>'><%= i.cat %> : </label>
    <input id='<%= i.cat %>' name='<%= i.cat %>' value='<%= i.val %>' type='number'/>
    </li>
<% }); %>
</ul>
</script>

<script type="text/template" id="roster-template">
<fieldset>
<legend>Base Positions</legend>
<% var flex = '' %>
<ul>
<% _.each(collection, function(i) { %>
    <% if (i['pos'] == 'flex') {
        flex = i;
    } else { %>
    <li>
    <label for='<%= i.pos %>'><%= i.pos %> : </label>
        <input id='<%= i.pos %>' name='<%= i.pos %>' value='<%= i.val %>' type='number'/>
    </li>
    <% } %>
<% }); %>
</ul>
</fieldset>
<fieldset id="flex">
    <!--<button id="add_flex">Add Flex</button>-->
    <legend>Flex</legend>
        <ul class="flex">
        <% _.each(flex.val, function(val, c) { %>
            <li>
            <% _.each(['qb', 'wr', 'rb', 'te'], function(pos) { %>
            <input type="checkbox" name="flex" value="<%= pos %>" 
                <% if (val.indexOf(pos) > -1) { %>
                checked="true"
                <% } %>
            />
            <%= pos %>
            <% }); %>
            <input name="flex_num" value="1" type="number" />
            </li>
        <% }); %>
        </ul>
</fieldset>
</script>

<script type="text/template" id="flex-template">
<ul clas="flex">
    <li>
    <% _.each(['qb', 'wr', 'rb', 'te'], function(pos) { %>
        <input type="checkbox" name="flex" value="<%= pos %>" 
        <%= pos %>
    <% }); %>
    <input name="flex_num" value="1" type="number" />
    </li>
</ul>
</script>

<script type="text/template" id="baseline-template">
<ul>
<% _.each(collection, function(i) { %>
    <% if (i.pos != 'flex' && i.pos != 'ben') { %>
    <li>
    <label for='<%= i.pos %>_baseline'><%= i.pos %> : </label>
    <input id='<%= i.pos %>_baseline' name='<%= i.pos %>_baseline' value='<%= i.baseline %>' type='number' />
    <% } %>
    </li>
<% }); %>
</ul>
</script>

<script type="text/javascript">
$(function () {
var initialize_table = function () { 
    var player_table = $('#player_table').dataTable({ 
        "bPaginate": false,
        "bLengthChange": false,
        "bInfo": false,
        "bAutoWidth": false,
        "aaSorting": [[5, "desc" ], [6, "desc"], [1, "asc"]],
        "aoColumnDefs":[
            {"bSortable": false, "aTargets":[0, 1, 2, 3]}
            ],
        "sDom": 't',
        "fnDrawCallback": function ( oSettings ) {
            var that = this;
            if ( oSettings.bSorted || oSettings.bFiltered ) {            
                this.$('td:first-child', {"filter":"applied"})
                    .each( function (i){
                        that.fnUpdate( i+1, this.parentNode, 0, false, false );
                    });
            };
        },
    });
    return player_table;
};
//Get variables
var url = location.search;
var variables = url.replace('?', '').split('&');
var get_vars = {}
if (variables[0]) {
    get_vars['flex'] = []
    _.each(variables, function(item) {
        var vars = item.split('=');
        var cat = vars[0];
        var val = vars[1];
        cat = cat.replace('+', ' ').replace('+', ' ');
        if (cat == 'flex') {
            get_vars[cat].push(val);
        } else {
            get_vars[cat] = val;
        }
    });
}
//Scoring
var ScoringItem = Backbone.Model.extend({
    initialize: function () {
        var cat = this.get('cat');
        if (cat in get_vars) {
            this.set('val', get_vars[cat]);
        };
    }
});
var Scoring = Backbone.Collection.extend({
    model: ScoringItem,
    url: '/static/scoring.json',
    initialize: function () {
    }
});
var ScoringView = Backbone.View.extend({
    template: $('#scoring-template'),
    el: '#scoring',
    initialize: function () {
        this.render();
    },
    render: function () {
        var template = _.template(this.template.html());
        var scoring_grouped = _.groupBy(this.collection.models, function(s) {
            return s.get('group')
        })
        this.$el.append(template({
            collection: scoring_grouped
            })
        );
    },
});
//Roster
var RosterItem = Backbone.Model.extend({
    initialize: function () {
        var pos = this.get('pos')
        if (pos in get_vars) {
            if (this.get('pos') == 'flex') {
                var flex = [];
                if (get_vars['flex_num']) {
                    _.each(_.range(get_vars['flex_num']), function (i) {
                        flex.push(get_vars['flex']);
                    });
                }
                this.set('val', flex);
            } else {
                this.set('val', parseInt(get_vars[pos]));
            }
        };
        var pos_baseline = pos + '_baseline';
        if (pos_baseline in get_vars && pos != 'flex' && pos != 'ben'){
                this.set('baseline', parseInt(get_vars[pos_baseline]));
        } else {
            this.set('baseline', this.getBaseline());
        };
    },
    getBaseline: function () {
        var pos = this.get('pos');
        var league_size = 12;
        if (pos == 'def') {
            var baseline = 1;
        } else if (pos == 'pk') {
            var baseline = 0;
        } else if (pos != 'flex' && pos != 'ben') {
            var baseline = this.get('val') * league_size;
        }
        return baseline;
    }
        
});
var Roster = Backbone.Collection.extend({
    model: RosterItem,
    url: '/static/roster.json',
    size: function () {
        var size = 0;
        _.each(this.models, function(ros) {
            var pos = ros.get('pos')
            if (pos == 'flex') {
                size += ros.get('val').length;
            } else {
                size += ros.get('val');
            }
        });
        return size;
    }
});
var RosterView = Backbone.View.extend({
    el: '#roster',
    template: $('#roster-template'),
    initialize: function () {
        this.baseline = new BaselineView({collection: this.collection});
        this.render();
    },
    events: {
        'select #baseline_toggle': 'renderBaseline',
        //'click #add_flex': 'addFlex',
    },
    render: function () {
        var template = _.template(this.template.html());
        this.$el.append(template({
            collection: this.collection.toJSON()
            })
        );
    },
    addFlex: function () {
        var template = _.template($('#flex-template').html());
        this.$el.find('#flex').append(template, {});
        return false;
    }
});
var BaselineView = Backbone.View.extend({
    el: '#baselines',
    template: $('#baseline-template'),
    events: {
        'click #baseline_toggle': 'toggle'
    },
    initialize: function () {
        if ('qb_baseline' in get_vars) {
            this.render();
            this.$el.find('input:checkbox').attr('checked', 'true');
        }
    },
    toggle: function () {
        var a = this.$el.find('ul').length;
        if (a) {
            this.$el.find('ul').remove();
        } else {
            this.render();
        }
    },
    render: function () {
        var template = _.template(this.template.html());
        this.$el.append(template({
            collection: this.collection.toJSON()
            })
        );
    }
});
//Other league info: perhaps add the roster and scoring back into this
var LeagueItem = Backbone.Model.extend({
    initialize: function () {
        var cat = this.get('cat');
        if (cat in get_vars) {
            this.set('val', get_vars[cat]);
        };
    }
});
var LeagueInfo = Backbone.Collection.extend({
    model: LeagueItem,
    url: '/static/league_info.json'
});
var LeagueView = Backbone.View.extend({
    el: '#league_info',
    template: $('#league-template'),
    initialize: function () {
        this.render();
    },
    render: function () {
        var template = _.template(this.template.html());
        this.$el.append(template({
            collection: this.collection.toJSON()
            })
        );
    },
});
//Player
var Player = Backbone.Model.extend({
    initialize: function (args) {
        this.set('pts', this.calcPts());
        this.set('val', 0);
        this.set('alpha', 0);
        if ('keeper' in get_vars && this.get('name')) {
            if (this.get('name') in get_vars) {
                this.set('keeper', get_vars[this.get('name')]);
            }
        };
    },
    calcPts: function () {
        var p = this;
        var score = 0;
        _.each(scoring.toJSON(), function (i) {
            var cat = i['cat'];
            if (p.get(cat)) {
                score += (p.get(cat) * i['val']);
            } 
        });
        return Math.round(score);
    }
});
/*
var Projection = Backbone.Collection.extend({
    model: Player,
    url: '/static/projections.json',
    initialize: function () {
        this.source_name = args['source_name'];
    },
    parse: function(d, i) {
        return d[this.source_name];
    }
});
*/
var Projection = Backbone.Collection.extend({
    model: Player,
    url: '/static/projections.json',
    initialize: function () {
    },
});
var ProjectionView = Backbone.View.extend({
    el: '#players',
    template: $('#player-row'),
    initialize: function () {
        this.calcFlex();
        this.calcAuction();
    },
    events: {
        'click #keeper_toggle': 'toggleKeepers',
        'change .keeper': 'updateKeeper',
    },
    updateKeeper: function (a) {
        var player_name = $(a.target).data('playerName');
        $(a.target).attr('name', player_name);
        if (!($(a.target).val())) {
            $(a.target).removeAttr('name');
        }
    },
    toggleKeepers: function () {
        var tog = $('#keeper_toggle:checked');
        if (tog.length) {
            $('.keeper').show();
            tog.attr('name', 'keeper');
        } else {
            $('.keeper').hide();
        }
    },
    calcFlex: function () {
        var players = this.collection;
        var league_size = league.findWhere({'cat': 'owners'}).get('val');
        var flex_players = [];
        var flex = roster.findWhere({'pos': 'flex'});
        var flex_dict = {}
        //Calc num of each flex pos
        _.each(flex.get('val'), function(items) {
            _.each(items, function(i) {
                if (i in flex_dict) {
                    flex_dict[i] += 1;
                } else {
                    flex_dict[i] = 1;
                }
            });
        });
        //Get array of all possible flex players
        _.each(flex_dict, function(val, pos) {
            var pos_ps = players.where({'pos': pos});
            var pos_ps = _.sortBy(pos_ps, function(player) {
                return player.get('pts');
            }).reverse();
            var ros = roster.findWhere({'pos': pos});
            var init_base = ros.get('baseline');
            var increment = val * league_size;
            var flex_ps = pos_ps.slice(init_base, init_base+increment);
            _.each(flex_ps, function (p) {
                flex_players.push(p);
            });
        });
        //Sort flex players by pts and take only top baseline players
        flex_ps = _.sortBy(flex_players, function(p) {
            return p.get('pts');
        }).reverse();
        var flex_baseline = flex.get('val').length * league_size;
        flex_ps = flex_ps.slice(0, flex_baseline);
        //Add back to each base pos the num of flex players
        var nums = _.countBy(flex_ps, function(p) {
            return p.get('pos');
        });
        _.each(nums, function(val, pos) {
            var get_base = pos + '_baseline';
            if (get_base in get_vars) {
            
            } else {
                var ros = roster.findWhere({'pos': pos});
                var new_base = ros.get('baseline') + val;
                ros.set('baseline', ros.get('baseline') + val);
            }
        });
    },
    calcAuction: function () {
        var players = this.collection;
        var league_size = league.findWhere({'cat': 'owners'}).get('val');
        //Calculate alpha
        var alpha = 0;
        _.each(roster.models, function(ros) {
            var pos = ros.get('pos');
            if (pos != 'ben' && pos != 'flex') {
                var pos_ps = players.where({'pos': pos});
                var p = _.sortBy(pos_ps, function(player) {
                    return player.get('pts');
                }).reverse();
                var baseline = ros.get('baseline');
                var baseline_p = p[baseline];
                var alpha_p = p.slice(0, baseline);
                _.each(alpha_p, function(player) {
                    var a = player.get('pts') - baseline_p.get('pts');
                    player.set('alpha', a);
                    alpha += a;
                });
            }
        });
        var budget = league.findWhere({'cat': 'budget'}).get('val');
        var roster_size = roster.size()
        var total_dollars = (budget-roster_size)*league_size;
        var ppd = total_dollars/alpha;
        if ('keeper' in get_vars) {
            var keepers = _.filter(this.collection.models, function (p) {
                return p.get('keeper');
            });
            _.each(keepers, function(p) {
                alpha -= p.get('alpha');
                total_dollars -= p.get('keeper');
                p.set('val', (p.get('alpha') * ppd).toFixed(2));
            });
        }
        var ppd = total_dollars/alpha;
        _.each(players.models, function(p) {
            var val = p.get('alpha') * ppd;
            if ('keeper' in get_vars && p.get('name') in get_vars) {
            
            } else {
                p.set('val', val.toFixed(2));
            }
        });
        this.render();
    },
    render: function () {
        template = _.template($('#player-row').html());
        this.$el.find('table tbody').append(template({
            collection: this.collection.toJSON()
            })
        );
        if ('keeper' in get_vars) {
            this.$el.find('#keeper_toggle')
                .attr('checked', 'true')
                .attr('name', 'keeper');
        } else {
            this.$el.find('.keeper').toggle();
        }
        player_table = initialize_table();
    },
});

if ('source_name' in get_vars) {
    var source_name = get_vars['source_name'];
} else {
    var source_name = 'espn';  
}

var scoring = new Scoring(league_info['scoring']);
var roster = new Roster(league_info['roster']);
var league = new LeagueInfo(league_info['info']);
var proj = new Projection(projections[source_name]);
var scoring_view = new ScoringView({collection: scoring});
var roster_view = new RosterView({collection: roster});
var league_view = new LeagueView({collection: league});
var proj_view = new ProjectionView({collection: proj});
/*
var proj = new ProjectionView({
    'source_name': source_name,
});
*/
});
</script>
</head>
<body>
<h1>Auction Cheat Sheet Creator</h1>

<form>
<div id="options">
<h2>Options</h2>
    <!--<a href="">Clear</a>-->
    <input id="update" type="submit" value="update options"/>
    <div id="source">
    </div>
    <fieldset id="scoring">
        <legend>Scoring</legend>
    </fieldset>
    <fieldset id="league_info">
        <legend>League Info</legend>
    </fieldset>
    <fieldset id="roster">
        <legend>Roster</legend>
    </fieldset>
    <fieldset id="baselines">
        <legend>Baselines</legend>
        <label id="hello" for="baseline_toggle">Custom Baselines</label>
        <input id="baseline_toggle" type="checkbox"/>
    </fieldset>
</div>

<div id="players">
<h2>Players</h2>
    <label for="source_name">Source: </label>
    <select id="source_name" name="source_name">
        <option value="espn">espn</option>
        <option value="pff">pff</option>
    </select>
    <label for="keeper_toggle">Keepers: </label>
    <input id="keeper_toggle" type="checkbox" />
    <table id="player_table">
        <thead>
            <tr>
                <th></th>
                <th>Player</th>
                <th>Pos</th>
                <th>Team</th>
            </tr>
            <tr>
                <th>Rk</th>
                <th><input id="player_search" /></th>
                <th></th>
                <th></th>
                <th>Pts</th>
                <th>Value</th>
                <th class="keeper">Keeper <input type="hidden" value="true" /></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
</form>

<script>
$(function () {

$('#player_search').on('keyup', function () {
    player_table.fnFilter($(this).val(), 1);
});

$('#position').on('change', function () {
    player_table.fnFilter( $(this).val(), 2);
});

$('#team').on('change', function () {
    player_table.fnFilter( $(this).val(), 3);
});

});
</script>
</body>
</html>








